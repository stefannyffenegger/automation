# deploys new hosts and verifies configs and sw packages
# run with: ansible-playbook -i inventory.yml deploy-laptop.yml
- name: deploy new laptop
  hosts: all
  vars:
    directory:
      temp: /tmp
      desktop: ~/Desktop
    deployscript:
      url: https://msgcnx.com/it/systemsetup.sh
      name: systemsetup.sh
    nomachine:
      url: https://download.nomachine.com/download/8.11/Linux/nomachine_8.11.3_4_amd64.deb
      name: nomachine_amd64.deb
    arduino:
      url: https://downloads.arduino.cc/arduino-ide/arduino-ide_latest_Linux_64bit.AppImage

  # update host
  tasks:
    - name: update ubuntu hosts
      become: true
      ansible.builtin.apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400 #One day

    # systemsetup.sh
    - name: create temp directory
      ansible.builtin.file:
        state: directory
        path: "{{ directory.temp }}"
    - name: download deploy script
      ansible.builtin.get_url:
        url: "{{ deployscript.url }}"
        dest: "{{ directory.temp }}/{{ deployscript.name }}"
        force: yes
        mode: "777"
    - name: run deploy script
      become: true
      ansible.builtin.expect:
        command: "{{ directory.temp }}/{{ deployscript.name }} -s"
        responses:
          Password: "{{ ansible_password }}"
        timeout: 900

    # NoMachine/NXServer
    - name: check if nomachine/nxserver service exists
      ansible.builtin.service_facts:
    - name: download nomachine deb
      when: "'nxserver.service' not in services"
      ansible.builtin.get_url:
        url: "{{ nomachine.url }}"
        dest: "{{ directory.temp }}/{{ nomachine.name }}"
    - name: install nomachine with dpkg
      when: "'nxserver.service' not in services"
      become: true
      ansible.builtin.shell: "dpkg -i {{ directory.temp }}/{{ nomachine.name }}"

    # Arduino IDE
    - name: set dialout user permission for serial connections
      become: true
      ansible.builtin.shell: usermod -a -G dialout {{ ansible_user }}
    - name: download arduino ide appimage
      ansible.builtin.get_url:
        url: "{{ arduino.url }}"
        dest: "{{ directory.desktop }}"

    - name: check if reboot required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file
    - name: reboot if required
      become: true
      reboot:
      when: reboot_required_file.stat.exists == true
